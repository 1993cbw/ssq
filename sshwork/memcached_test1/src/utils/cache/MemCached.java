package utils.cache;

import java.util.Date;
import com.danga.MemCached.MemCachedClient;
import com.danga.MemCached.SockIOPool;

/**
 * 使用memcached的缓存实用类.
 * 
 * @author 铁木箱子
 * 
 */
public class MemCached extends Thread{
	
	// 创建全局的唯一实例
	protected static MemCachedClient mcc = null;

	protected static MemCached memCached = null;

	// 设置与缓存服务器的连接池
//	static {
//		// 服务器列表和其权重
//		String[] servers = { "192.168.1.4:11211" ,"192.168.1.5:11211"};
//		Integer[] weights = { 10,20 };
//
//		// 获取socke连接池的实例对象
//		SockIOPool pool = SockIOPool.getInstance();
//
//		// 设置服务器信息
//		pool.setServers(servers);
//		pool.setWeights(weights);
//
//		// 设置初始连接数、最小和最大连接数以及最大处理时间
//		pool.setInitConn(5);
//		pool.setMinConn(5);
//		pool.setMaxConn(250);
//		pool.setMaxIdle(1000 * 60 * 60 * 6);
//
//		// 设置主线程的睡眠时间
//		pool.setMaintSleep(30);
//
//		// 设置TCP的参数，连接超时等
//		pool.setNagle(false);
//		pool.setSocketTO(3000);
////		pool.setSocketConnectTO(0);
//
//		// 初始化连接池
//		pool.initialize();
//
//		// 压缩设置，超过指定大小（单位为K）的数据都会被压缩
////		mcc.setCompressEnable(true);
////		mcc.setCompressThreshold(64 * 1024);
//	}

	/**
	 * 保护型构造方法，不允许实例化！
	 * 
	 */
	protected MemCached() {

	}

	/**
	 * 获取唯一实例.
	 * 
	 * @return
	 */
	public synchronized static MemCached getInstance() {
		if(memCached==null) {
			// 服务器列表和其权重
			String[] servers = { "192.168.1.4:11211" };
			Integer[] weights = { 10};
	
			// 获取socke连接池的实例对象
			SockIOPool pool = SockIOPool.getInstance();
	
			// 设置服务器信息
			pool.setServers(servers);
			pool.setWeights(weights);
	
			// 设置初始连接数、最小和最大连接数以及最大处理时间
			pool.setInitConn(5);
			pool.setMinConn(5);
			pool.setMaxConn(250);
			pool.setMaxIdle(1000 * 60 * 60 * 6);
	
			// 设置主线程的睡眠时间
			pool.setMaintSleep(30);
	
			// 设置TCP的参数，连接超时等
			pool.setNagle(false);
			pool.setSocketTO(3000);
	//				pool.setSocketConnectTO(0);
	
			// 初始化连接池
			pool.initialize();

		// 压缩设置，超过指定大小（单位为K）的数据都会被压缩
//				mcc.setCompressEnable(true);
//				mcc.setCompressThreshold(64 * 1024);
			memCached = new MemCached();
			mcc = new MemCachedClient();
		}
		return memCached;
	}
	
	
	public static MemCachedClient getMemCachedClientInstance() {
		return mcc;
	}
	

	/**
	 * 添加一个指定的值到缓存中.
	 * 
	 * @param key
	 * @param value
	 * @return
	 */
	public boolean add(String key, Object value) {
		return mcc.add(key, value);
	}

	public boolean add(String key, Object value, Date expiry) {
		return mcc.add(key, value, expiry);
	}

	public boolean replace(String key, Object value) {
		return mcc.replace(key, value);
	}

	public boolean replace(String key, Object value, Date expiry) {
		return mcc.replace(key, value, expiry);
	}

	/**
	 * 根据指定的关键字获取对象.
	 * 
	 * @param key
	 * @return
	 */
	public Object get(String key) {
		return mcc.get(key);
	}

	public static void main(String[] args) {
		MemCached cache = MemCached.getInstance();
		cache.start();
//		if(args[0].equals("add")) {
//			addObject();
//		} else if(args[0].equals("get")) {
//			getObject();
//		}
		
		
	}

	public static void addObject() {
		
		for(int i=0;i<1000;i++) {
			memCached.add("192.168.1.4_"+i, i);
			memCached.add("192.168.1.5_"+i, i);
		}
		
	}
	
	public static void getObject() {
		
		for(int i=0;i<1000;i++) {
			String key1 = "192.168.1.4_"+i;
			String key2 = "192.168.1.5_"+i;
			
			Object o1 =  memCached.get(key1);
			if(o1==null) {
				memCached.add(key1, i);
			}
			System.out.println(key1 + "  get value : " + memCached.get(key1));
			
			Object o2 =  memCached.get(key2);
			if(o2==null) {
				memCached.add(key2, i);
			}
			System.out.println(key2 + "  get value : " + memCached.get(key2));
		}
		
	}
}
